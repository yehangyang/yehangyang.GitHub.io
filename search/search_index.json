{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>[[what_is_ai_doing]]</p>"},{"location":"lm/kv_cache/","title":"KV cache","text":""},{"location":"lm/kv_cache/#_1","title":"\u7ed3\u8bba","text":"<ol> <li> <p>\u5e94\u7528\u5728\u4ec0\u4e48\u5730\u65b9?</p> <p>a. \u4f18\u5316\u57fa\u4e8e decoder \u7ed3\u6784\u7684 LM(i.e., Language Model) \u6a21\u578b\u4e2d attention \u548c FFN \u7684\u63a8\u7406\u6548\u7387</p> </li> <li> <p>\u6682\u5b58\u4e86\u4ec0\u4e48\u5185\u5bb9?</p> <p>a. \u5386\u53f2 token \u5bf9\u5e94\u7684 K/V tensor</p> </li> <li> <p>\u8282\u7701\u4e86\u4ec0\u4e48\u65f6\u95f4?</p> <p>a. \u8ba1\u7b97\u5386\u53f2 token \u5bf9\u5e94\u7684 K/V tensor \u7684\u65f6\u95f4 b. \u8ba1\u7b97\u5386\u53f2 token \u5bf9\u5e94\u7684 FFN \u7684\u65f6\u95f4</p> </li> <li> <p>\u80fd\u591f\u5de5\u4f5c\u7684\u524d\u63d0\u6761\u4ef6(\u6ce8\u610f\u70b9)</p> <p>a. \u5f53\u524d token \u53ea\u80fd\u770b\u5230\u5386\u53f2 token \u4fe1\u606f\u4e0d\u80fd\u770b\u5230\u672a\u6765 token \u4fe1\u606f b. \u8ba1\u7b97 attention \u65f6, scale \u7cfb\u6570\u662f\u5e38\u6570(e.g., \\(\\sqrt{d_k}\\) \u5176\u4e2d \\(d_k\\) \u662f Q/K \u7684\u7279\u5f81\u7ef4\u5ea6, \u6a21\u578b\u5b8c\u6210\u8bbe\u8ba1\u5373\u786e\u5b9a, \u6ce8\u610f\u4e0d\u662f token \u6570\u91cf)</p> </li> </ol>"},{"location":"lm/kv_cache/#_2","title":"\u80cc\u666f","text":"<p>KV cache \u7684\u4f18\u5316\u53d1\u751f\u5728 decoder-only \u7684 Causal LM \u7ed3\u6784\u4e2d(\u4ee3\u8868\u6a21\u578b\u662f GPT, Generative Pre-Training \u7cfb\u5217), \u5176\u7ed3\u6784\u793a\u610f\u53ef\u53c2\u8003\u4e0b\u56fe:</p> <p></p> <p>\u5728\u5b9e\u9645\u63a8\u7406\u8fc7\u7a0b\u4e2d,</p> <ol> <li>\\(x_1, x_2, x_3\\) \u4f5c\u4e3a\u8f93\u5165\u6587\u672c\u8fdb\u5165\u6a21\u578b</li> <li>\u6a21\u578b\u7ecf\u63a8\u7406\u8f93\u51fa\u9884\u6d4b\u7ed3\u679c \\(y_1\\)</li> <li>\u968f\u540e \\(y_1\\) \u62fc\u63a5\u5230 \\(x_1, x_2, x_3\\) \u540e\u9762\u4f5c\u4e3a\u6a21\u578b\u65b0\u7684\u8f93\u5165\u6587\u672c, \u4ee5\u6b64\u5f80\u590d, \u76f4\u5230\u8f93\u51fa \"\u4f11\u6b62\u7b26\"</li> </ol> <p>\u6a21\u578b\u7ed3\u6784\u4e0a\u9700\u8981\u6ce8\u610f\u7684\u70b9\u662f: \u5f53\u524d token \u53ea\u80fd\u770b\u5230\u5386\u53f2 token \u4fe1\u606f.</p>"},{"location":"lm/kv_cache/#_3","title":"\u63a8\u6f14\u4f18\u5316\u6d41\u7a0b","text":"<p>\u63a8\u6f14\u4f18\u5316\u6d41\u7a0b\u4e3b\u8981\u901a\u8fc7\u56fe\u793a\u8bf4\u660e KV cache \u5982\u4f55\u5b9e\u73b0\u548c\u4f18\u5316\u70b9.</p>"},{"location":"lm/kv_cache/#_4","title":"\u7b2c\u4e00\u5e27","text":"<p>\u7b2c\u4e00\u5e27\u6587\u672c\u6570\u636e\u901a\u5e38\u662f\u7528\u6237\u8f93\u5165\u7684\u4e00\u4e2a\u95ee\u53e5, e.g., \u7528\u6237\u8f93\u5165 \"who are you?\", \u7ecf\u8fc7\u63a8\u7406\u5f97\u5230\u8f93\u51fa\u6587\u672c\u7684\u7b2c\u4e00\u4e2a\u8bcd \"I\". \u5177\u4f53\u8bf7\u53c2\u8003\u4e0b\u56fe\u6240\u793a:</p> <p></p>"},{"location":"lm/kv_cache/#_5","title":"\u7b2c\u4e8c\u5e27","text":""},{"location":"lm/kv_cache/#without-kv-cache","title":"without KV cache","text":""},{"location":"lm/kv_cache/#with-kv-cache","title":"with KV cache","text":"<p>\u56fe\u4e2d\u7ea2\u8272\u77e9\u5f62\u6846\u4e2d\u7684 tensor \u8868\u793a\u5728 cache \u4e2d.</p> <p></p>"},{"location":"nn_quant/appendix/","title":"\u9644\u5f55","text":""},{"location":"nn_quant/appendix/#_2","title":"\u91cf\u5316\u672f\u8bed","text":"<ul> <li>\u5927\u5199\u5b57\u6bcd\u8868\u793a\u6574\u6570 tensor</li> <li>\u5c0f\u5199\u5b57\u6bcd\u8868\u793a\u6d6e\u70b9 tensor</li> <li>\\(scale\\) \u8868\u793a\u91cf\u5316\u7f29\u653e\u7cfb\u6570</li> <li>\\(zero\\_point\\) \u8868\u793a\u91cf\u5316\u96f6\u70b9\u504f\u79fb\uff08\u672c\u6587\u5148\u628a\u95ee\u9898\u7b80\u5355\u5316\uff0c\u53ea\u8003\u8651\u5bf9\u79f0\u91cf\u5316\uff0c\u4e0d\u8003\u8651\u96f6\u70b9\u504f\u79fb\uff09</li> <li>\\(bit\\) \u8868\u793a\u91cf\u5316\u7c7b\u578b\u4f4d\u6570</li> <li>\u91cf\u5316\u540e\u6570\u636e\u8303\u56f4 \\([Q^{min}, Q^{max}]\\)</li> <li>\u5bf9\u79f0\u91cf\u5316\u7684 \\(scale = \\frac {F^{max}} {Q^{max}}\\)\uff0c\u5176\u4e2d \\(F^{max}\\) \u8868\u793a\u6d6e\u70b9\u6700\u5927\u503c\uff0c\u7531 PTQ \u786e\u5b9a\uff0c\\(Q^{max}\\) \u7531 \\(bit\\) \u786e\u5b9a</li> <li>\u91cf\u5316\uff08Q\uff09\uff1a\\(X_i = clamp([x_i/scale_x]; Q^{min}, Q^{max})\\)</li> <li>\u53cd\u91cf\u5316\uff08DQ\uff09\uff1a\\(x'_i = scale_x X_i \\approx x_i\\)</li> </ul>"},{"location":"nn_quant/table_based_quant/","title":"\u67e5\u8868\u6cd5\u91cf\u5316\u6fc0\u6d3b\u51fd\u6570","text":""},{"location":"nn_quant/table_based_quant/#_2","title":"\u524d\u8a00","text":"<p>\u672c\u6587\u5c06\u8bb2\u8ff0\u57fa\u4e8e\u67e5\u8868\u6cd5\u6765\u5b9e\u73b0\u6fc0\u6d3b\u51fd\u6570\u7684\u91cf\u5316\u3002\u56e0\u4e3a\u76ee\u524d\u6ca1\u6709\u5b9e\u9645\u8d1f\u8f7d\u7684\u5b9e\u73b0\uff0c\u6240\u4ee5\u6807\u6ce8\u4e3a\u201c\u53e3\u55e8\u7248\u201d\u3002\u5f53\u7136\u540e\u7eed\u4f1a\u62bd\u7a7a\u505a\u5b9e\u9645\u8d1f\u8f7d\u7684\u5b9e\u9a8c\uff08\u76ee\u6807\u662f Transformer\uff09\uff0c\u4e89\u53d6\u65e9\u65e5\u62b9\u6389\u8fd9\u4e2a\u6807\u6ce8\u3002\u4e0d\u8fc7\u5b9e\u73b0\u7684\u5355\u4e2a\u91cf\u5316\u7b97\u5b50\uff0c\u90fd\u63d0\u4f9b\u4e86\u6d4b\u8bd5\u7528\u4f8b\u3002 \u9879\u76ee\u5730\u5740\uff1ahttps://github.com/yehangyang/Activation_Function_Quantization</p>"},{"location":"nn_quant/table_based_quant/#_3","title":"\u52a8\u673a","text":"<p>\u9996\u5148\u4ea4\u4ee3\u4e00\u4e0b\u6fc0\u6d3b\u51fd\u6570\u91cf\u5316\u7684\u9700\u6c42\u4ece\u4f55\u800c\u6765\u3002\u4e3a\u4e86\u63d0\u9ad8\u6a21\u578b\u63a8\u7406\u901f\u5ea6\uff0c\u4e00\u4e9b\u7b97\u5b50\u88ab\u505a\u6210\u91cf\u5316\u7b97\u5b50\uff0c\u5728\u6574\u578b\u57df\u4e0a\u8fdb\u884c\u8ba1\u7b97\uff08e.g. int8 \u91cf\u5316\uff0c\u8fd8\u6709\u66f4\u6fc0\u8fdb\u7684 int4 \u91cf\u5316\uff09\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u7ebf\u6027\u8ba1\u7b97\u5b9e\u73b0\u91cf\u5316\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u56e0\u4e3a\u4e0d\u662f\u672c\u6587\u8ba8\u8bba\u91cd\u70b9\uff0c\u8fd9\u91cc\u4e0d\u505a\u8d58\u8ff0\u3002</p> <p>\u800c\u5728\u6a21\u578b\u8bbe\u8ba1\u4e2d\uff0c\u7ebf\u6027\u5c42\u7684\u540e\u9762\u901a\u5e38\u4f1a\u8ddf\u4e00\u4e2a\u975e\u7ebf\u6027\u5c42\uff08\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u6fc0\u6d3b\u51fd\u6570\uff09\u3002\u4f8b\u5982\u73b0\u5728\u6709\u4e0b\u56fe\uff08a\uff09\u8fd9\u6837\u4e00\u4e2a\u6a21\u578b\u3002\u5982\u679c\u53ea\u80fd\u5bf9\u7ebf\u6027\u5c42\u505a\u91cf\u5316\uff0c\u90a3\u4e48\u53ea\u80fd\u5f97\u5230\u4e0b\u56fe\uff08b\uff09\u8fd9\u6837\u7684\u6548\u679c\uff0c\u91cf\u5316\u548c\u975e\u91cf\u5316\u7b97\u5b50\u4e4b\u95f4\u4f1a\u7a7f\u63d2\u5f88\u591a Q/DQ \u8282\u70b9\uff08\u4e5f\u5c31\u662f\u91cf\u5316\u548c\u6d6e\u70b9\u95f4\u7684\u8f6c\u5316\uff09\u3002\u800c\u6211\u4eec\u5e0c\u671b\u770b\u5230\u4e0b\u56fe\uff08c\uff09\u7684\u6548\u679c\uff0c\u4e5f\u5c31\u662f\u5e0c\u671b\u6fc0\u6d3b\u51fd\u6570\u4e5f\u80fd\u8fdb\u884c\u91cf\u5316\u8ba1\u7b97\u3002</p> <p></p> <p>\u89c2\u5bdf\u4e0a\u56fe\uff08b\uff09\uff0cnonlinear \u7684\u8f93\u51fa\u4f1a\u518d\u6b21\u88ab\u91cf\u5316\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u91cf\u5316 linear \u7684\u8f93\u5165\u3002\u7ec6\u60f3\uff0c\u91cf\u5316\u5176\u5b9e\u540c\u65f6\u5728\u8fb9\u754c\u4e0a\u548c\u6570\u91cf\u4e0a\u9650\u5236\u4e86\u8868\u793a\u8303\u56f4\u3002\u4ee5 int8 \u91cf\u5316\u4e3a\u4f8b\uff0clinear \u8f93\u51fa\u7684 \\(X \\in [-128, +127]\\)\uff08\u8fb9\u754c\u9650\u5236\uff09\uff0c\u53ef\u7531 256 \u4e2a\u6570\u8868\u793a\uff08\u6570\u91cf\u9650\u5236\uff09\u3002\u6b64\u65f6\u5982\u679c nonlinear \u7531\u6d6e\u70b9\u5b9e\u73b0\uff0c\u5219 \\(X\\) \u9700\u8981\u88ab\u53cd\u91cf\u5316\uff08\\(x' = scale_x \u00b7 X\\)\uff09\uff0c\u624d\u80fd\u4f5c\u4e3a\u6d6e\u70b9 nonlinear \u7684\u8f93\u5165\u3002\u8bf7\u4e0d\u8981\u4ee5\u4e3a\u505a\u4e86\u53cd\u91cf\u5316\u53d8\u6210\u6d6e\u70b9\u6570\u4e86\uff0c\\(x'\\) \u7684\u8fb9\u754c\u548c\u6570\u91cf\u9650\u5236\u5c31\u89e3\u9664\u4e86\uff0c\u5b83\u4ecd\u65e7\u88ab\u9650\u5236\u5728 \\([-128scale_x, +127scale_x]\\)\uff0c\u6570\u503c\u8868\u793a\u6570\u91cf\u4e3a 256 \u4e0d\u53d8\uff08\u5e76\u4e14\u53ef\u4ee5\u548c\u53cd\u91cf\u5316\u524d\u4e00\u4e00\u5bf9\u5e94\uff09\u3002\u5728\u6d6e\u70b9\u57df\u505a\u5b8c nonlinear \u4e4b\u540e\uff0c\\(y = nonlinear(x')\\)\uff0c\u9650\u5236\u4ecd\u7136\u5b58\u5728\uff08\u4ecd\u7136\u4fdd\u6301\u4e00\u4e00\u5bf9\u5e94\uff09\u3002\u4e3a\u4e86\u80fd\u6210\u4e3a\u4e0b\u4e00\u4e2a\u91cf\u5316 linear \u7684\u8f93\u5165\uff0c\u9700\u8981\u5bf9 \\(y\\) \u91cf\u5316\uff0c\\(Y = [\\frac {y} {scale_y}]\\)\uff0c\u9650\u5236\u4f9d\u65e7\u5728\uff08\u4e00\u4e00\u5bf9\u5e94\uff09\u3002\u8d39\u52b2\u5468\u7ae0\uff0c\u6700\u540e\u5f97\u5230\u7684\u8fd8\u662f 256 \u79cd\u6570\u503c\u7ed3\u679c\uff0c\u6240\u4ee5\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u501f\u52a9\u201c\u4e00\u4e00\u5bf9\u5e94\u201d\u7684\u4f20\u9012\u6027\uff0c\u7528\u67e5\u8868\u6cd5\u6765\u5f97\u5230 nonlinear \u7684\u91cf\u5316\u7ed3\u679c\u5462\uff1f</p> <p>\u603b\u7ed3\u4e00\u4e0b\uff0c\u6211\u4eec\u7684\u52a8\u673a\u662f\u5e0c\u671b\u901a\u8fc7\u91cf\u5316\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u6765\u5b9e\u73b0\u5168\u6a21\u578b\u7684\u91cf\u5316\uff08\u4e0a\u56fe\uff08b\uff09\u5230\u4e0a\u56fe\uff08c\uff09\u7684\u8f6c\u53d8\uff09\uff0c\u5e76\u4e14\u6839\u636e\u5206\u6790\u662f\u53ef\u4ee5\u901a\u8fc7\u67e5\u8868\u6cd5\u6765\u5b9e\u73b0\u91cf\u5316\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff0c\u4e14\u53ef\u4ee5\u4fdd\u8bc1\u65e0\u8bef\u5dee\u3002</p> <p>\u6b63\u5982\u300a\u52a8\u673a\u300b\u7ae0\u8282\u63cf\u8ff0\uff0c\u6211\u4eec\u5c06\u7528\u67e5\u8868\u6cd5\u6765\u5b9e\u73b0\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u7684\u91cf\u5316\u3002\u91cf\u5316\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u662f\u4e3a\u4e86\u5b9e\u73b0\u56fe\u4e2d\uff08c\uff09\u7684 nonlinear(int8) \u7b49\u6548\u66ff\u6362\uff08b\uff09\u7684 DQ -&gt; nonlinear(float) -&gt; Q \u8fc7\u7a0b\u3002</p> <p></p>"},{"location":"nn_quant/table_based_quant/#_4","title":"\u6d4b\u8bd5\u4ee3\u7801","text":"<p>\u4ee3\u7801\u5730\u5740</p> <p>\u4e0d\u540c\u6fc0\u6d3b\u51fd\u6570\u7684\u67e5\u8868\u5b9e\u73b0\u53ef\u80fd\u5b58\u5728\u5dee\u5f02\uff0c\u4f46\u662f\u6d4b\u8bd5\u8bbe\u8ba1\u80af\u5b9a\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u628a\u6d4b\u8bd5\u8bbe\u8ba1\u653e\u5728\u529f\u80fd\u8bbe\u8ba1\u524d\u9762\u3002\u6d4b\u8bd5\u65f6\u9700\u8981\u4fdd\u8bc1\u5728\u76f8\u540c\u91cf\u5316\u8f93\u5165\u4e0b\uff0c\uff08b\uff09\u548c\uff08c\uff09\u4e24\u8005\u91cf\u5316\u8f93\u51fa\u7684\u6570\u503c\u662f\u5b8c\u5168\u76f8\u7b49\u7684\u3002\u5982\u4ee3\u7801\u5757\u6240\u793a\uff0c\u5176\u4e2d\uff1a</p> <ul> <li>L20 \u8868\u793a\uff08c\uff09\u7684\u865a\u7ebf\u6846\u8fc7\u7a0b\uff0c\u91cf\u5316\u7ed3\u679c\u4e3aquant_output\u3002</li> <li>L23~L25 \u8868\u793a\uff08b\uff09\u7684\u865a\u7ebf\u6846\u8fc7\u7a0b\uff0c\u91cf\u5316\u7ed3\u679c\u4e3aground_truth_quant_output\u3002</li> <li>L28 \u662f\u5143\u7d20\u6bd4\u8f83\uff0cquant_output\u5e94\u8be5\u4e0eground_truth_quant_output\u5b8c\u5168\u76f8\u7b49\u3002</li> </ul> <pre><code>def __check_symmetric_quant(quant_cls: _SymmetryQuant, float_func: Callable, input_amax: float, bit: int,\n                            narrow: bool) -&gt; bool:\n    \"\"\"Check whether the output of quant_cls is correct\n\n    Args:\n        quant_cls (_SymmetryQuant): an symmetric quantization operator\n        float_func (Callable): ground truth function in floating-point\n        input_amax (float): the amax of input for quantization\n        bit (int): the bit number of quantization\n        narrow (bool): Ture: quant_min = -2^(bit - 1) + 1, False: quant_min = 2^(bit - 1)\n\n    Returns:\n        bool: Ture: all elements of quantization function output are correct, False: any elements is wrong\n    \"\"\"\n    input_shape = (1, 128)\n    quant_input = torch.randint(utils.quant_min(bit, narrow), utils.quant_max(bit) + 1, input_shape, dtype=torch.int8)\n\n    # (quant_input) -&gt; quant_func -&gt; (quant_output)\n    quant_func = quant_cls(input_amax, bit, narrow)\n    quant_output = quant_func(quant_input)\n\n    # (quant_input) -&gt; DQ -&gt; float_func -&gt; Q -&gt; (quant_output)\n    ground_truth_float_input = utils.dequantize(quant_input, quant_func.input_scale)\n    ground_truth_float_output = float_func(ground_truth_float_input)\n    ground_truth_quant_output = utils.quantize(ground_truth_float_output, quant_func.output_scale, bit, narrow)\n\n    # every element should be the same\n    return (quant_output == ground_truth_quant_output).all()\n</code></pre>"},{"location":"nn_quant/table_based_quant/#_5","title":"\u529f\u80fd\u4ee3\u7801","text":"<p>\u4ee3\u7801\u5730\u5740 \u529f\u80fd\u5b9e\u73b0\u7684\u5173\u952e\u662f\u751f\u6210\u67e5\u8868\u6cd5\u7528\u5230\u7684\u6620\u5c04\u8868\u3002\u4ee5\u5bf9\u79f0\u91cf\u5316\u4e3a\u4f8b\uff0c\u83b7\u53d6\u6620\u5c04\u8868 table \u7684\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\u9762\u4ee3\u7801\u5757\u6240\u793a\uff0c\u5176\u4e2d\uff1a</p> <ul> <li>L21\uff5eL33\uff1a\u751f\u6210\u6620\u5c04\u8868 table \u7684\u4ee3\u7801\uff08\u5728__init__\u51fd\u6570\u4e2d\u53ef\u89c1\uff09</li> <li>L36\uff1a\u524d\u5411\u63a8\u7406\u65f6\u7684\u67e5\u8868\u8fc7\u7a0b</li> </ul> <pre><code>class _SymmetryQuant(torch.nn.Module):\n\n    def __init__(self,\n                 func: Callable,\n                 input_amax: float,\n                 bit: int,\n                 narrow: bool = False,\n                 output_amax: float = None) -&gt; None:\n        \"\"\"Initialize quant-input to quant-output mapping table for symmetry quantization.\n\n        Args:\n            func (Callable): corresponding standard floating-point function\n            input_amax (float): the amax of input for quantization\n            bit (int): the bit number\n            narrow (bool, optional): True: quant_min = -2^(bit - 1) + 1. Defaults to False, quant_min = -2^(bit - 1)\n            output_amax (float, optional): the amax of output for quantization.\n                                           Defaults to None, the amax = amax(nonlinear(DQ(quant_input)))\n        \"\"\"\n        super().__init__()\n        # (input_quant) -&gt; DQ -&gt; (input_float)\n        self.__input_scale = input_amax / quant_max(bit)\n        input_quant = torch.arange(quant_min(bit, narrow), quant_max(bit) + 1, dtype=torch.int8)\n        input_float = input_quant * self.__input_scale\n\n        # (input_float) -&gt; float_func -&gt; Q -&gt; (output_quant)\n        output_float = func(input_float)\n        output_amax = output_amax if output_amax else torch.absolute(output_float).max()\n        self.__output_scale = output_amax / quant_max(bit)\n        output_quant = quantize(output_float, self.__output_scale, bit, narrow)\n\n        # adjust sequence of output_quant for easier retrieve\n        index = quant_max(bit) if narrow else quant_max(bit) + 1\n        self._table = torch.cat((output_quant[index:], output_quant[:index]))\n\n    def forward(self, x: torch.Tensor):\n        y = self._table[x.to(torch.int64)]\n        return y\n\n    @property\n    def input_scale(self):\n        return self.__input_scale\n\n    @property\n    def output_scale(self):\n        return self.__output_scale\n</code></pre> <p>\u81f3\u6b64\u5b8c\u6210\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u91cf\u5316\u67e5\u8868\u6cd5\u7684\u6700\u666e\u9002\u5b9e\u73b0\uff0ci.e.\uff0c\u9002\u5408\u4efb\u4f55\u4e00\u4e2a\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u7684\u91cf\u5316\u5b9e\u73b0\uff08\u9664\u4e86 Softmax\uff09\u3002\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e2d\uff0c\u53ef\u80fd\u4f1a\u5305\u542b\u591a\u4e2a\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u3002\u5982\u679c\u6bcf\u4e2a\u6fc0\u6d3b\u51fd\u6570\u90fd\u4f7f\u7528\u67e5\u8868\u6cd5\u5b9e\u73b0\uff0c\u4ee5 int8 \u91cf\u5316\u4e3a\u4f8b\uff0c\u6bcf\u4e2a\u6fc0\u6d3b\u51fd\u6570\u7684\u67e5\u8868\u5b9e\u73b0\u9700\u8981\u82b1\u8d39 256 Byte \u7684\u5185\u5b58\u3002\u5982\u679c\u6fc0\u6d3b\u51fd\u6570\u6570\u91cf\u7a0d\u591a\u4e00\u70b9\uff0c\u5185\u5b58\u5360\u7528\u8fd8\u662f\u6bd4\u8f83\u5389\u5bb3\u7684\u3002\u4e0d\u8fc7\u5982\u679c\u6211\u4eec\u7a0d\u52a0\u9650\u5236\uff0c\u8b6c\u5982\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e2d\uff0c\u540c\u4e00\u79cd\u6fc0\u6d3b\u51fd\u6570\u7684\u8f93\u5165/\u8f93\u51fa scale \u80fd\u5206\u522b\u9650\u5236\u4e3a\u76f8\u540c\uff0c\u6216\u8005\u9650\u5236\u5728\u5c11\u91cf\u7ec4\u5408\u4e2d\uff0c\u90a3\u4e48\u67e5\u8868\u6cd5\u4f7f\u7528\u7684\u8868\u683c\u6570\u91cf\u5c31\u80fd\u51cf\u5c11\u3002e.g., \u4e00\u4e2a\u7f51\u7edc\u4e2d\u6709 30 \u4e2a Sigmoid \u6fc0\u6d3b\u51fd\u6570\uff0c\u5176\u4e2d 10 \u4e2a\u7684\u8f93\u5165/\u8f93\u51fa scale \u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u5c31\u80fd\u5171\u7528\u4e00\u4e2a\u8868\uff1b\u5982\u679c\u6761\u4ef6\u5141\u8bb8\uff0c30 \u4e2a Sigmoid \u7684\u8f93\u5165/\u8f93\u51fa scale \u90fd\u5206\u522b\u76f8\u540c\uff0c\u90a3\u5c31\u90fd\u80fd\u5171\u7528\u540c\u4e00\u4e2a\u8868\uff0c\u5185\u5b58\u5360\u7528\u4e00\u4e0b\u5b50\u7f29\u5c0f 30 \u500d\u3002</p> <p>\u8bdd\u8bf4\u56de\u6765\uff0c\u8fd9\u4e2a\u5185\u5b58\u5360\u7528\u4e0e\u4e00\u4e2a\u5377\u79ef\u6838 [N, C, H, W] = [4, 8, 3, 3] \u5dee\u4e0d\u591a\uff08\u540c\u6837\u4ee5 int8 \u91cf\u5316\u6765\u6bd4\u8f83\uff09\uff0c\u800c\u901a\u5e38\u7684\u5377\u79ef\u6838\u662f\u8be5\u4f8b\u5b50\u7684\u597d\u51e0\u500d\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u5c0f\u8282\u4f1a\u6839\u636e\u5404\u6fc0\u6d3b\u51fd\u6570\u7684\u7279\u6027\uff0c\u7ed9\u51fa\u4e00\u4e9b\u7279\u4f8b\u8bbe\u8ba1\uff0c\u8bd5\u56fe\u8fdb\u4e00\u6b65\u63d0\u5347\u63a8\u7406\u6027\u80fd\uff08\u901a\u5e38\u662f\u5185\u5b58\u548c\u8ba1\u7b97\u4e4b\u95f4\u7684\u535a\u5f08\uff09\u3002\u8fd8\u4f1a\u8ba8\u8bba\u5982\u4f55\u5b9e\u73b0 Softmax \u7684\u91cf\u5316\u3002</p>"},{"location":"nn_quant/table_based_quant/#softmax","title":"Softmax","text":"<p>\u8868\u8fbe\u516c\u5f0f\uff1a\\(y_i = \\frac{e^{x_i}}{\\sum_{i}^{n} e^{x_i}}\\)</p> <p>\u51fd\u6570\u66f2\u7ebf\uff1a\u6ca1\u6709\u56fa\u5b9a\u66f2\u7ebf</p>"},{"location":"nn_quant/table_based_quant/#_6","title":"\u6570\u5b66\u63a8\u6f14","text":""},{"location":"nn_quant/table_based_quant/#max","title":"\u6d88\u9664 max","text":"<p>\u8ba1\u7b97 softmax \u7684\u7b2c\u4e00\u6b65\u901a\u5e38\u90fd\u662f\u505a\u5982\u4e0b\u8fd9\u6837\u4e00\u4e2a\u7b49\u4ef7\u53d8\u5316\uff0c\u6765\u4fdd\u8bc1\u6c42\u548c\u65f6\u4e0d\u4f1a\u53d1\u751f\u6570\u636e\u6ea2\u51fa\uff0c</p> \\[ y_i = \\frac{e^{x_i}}{\\sum_{i}^{n} e^{x_i}} = \\frac{e^{x_i - offset}}{\\sum_{i}^{n} e^{x_i-offset}}, offset = \\max_{i \\in n}(x_i) \\] <p>\u968f\u540e\u5c06\u95ee\u9898\u62c6\u89e3\u4e3a\u5982\u4f55\u5f97\u5230 \\(e^{x_i - \\max_{i \\in n}(x_i)}\\)\u3002\u4ee3\u5165\u91cf\u5316\u7684\u8868\u8fbe\u5f0f \\(x_i = scale_x X_i\\)\uff0c\u5f97\uff0c</p> \\[ e^{scale_x X_i - \\max_{i \\in n}(scale_x X_i)} = e^{scale_x(X_i - \\max_{i \\in n}(X_i))} \\] <p>\u5bf9\u4e8e \\(X\\)\uff08\u91cf\u5316 tensor\uff09\u800c\u8a00\uff0c</p> \\[ \\max_{i \\in n}(X_i) \\le Q_{max}, i.e., scale_x \\max_{i \\in n}(X_i) \\le scale_x Q_{max} \\] <p>\u4e8e\u662f\u5c06 \\(offset\\) \u8bbe\u5b9a\u4e3a \\(scale_x Q_{max}\\)\uff0c\u7b49\u4ef7\u53d8\u5316\u4ecd\u7136\u6210\u7acb\uff0c\u540c\u65f6\u907f\u514d\u6c42\u548c\u65f6\u53d1\u751f\u6570\u636e\u6ea2\u51fa\u3002\u5373\uff0c</p> \\[ y_i = \\frac {e^{scale_x X_i - scale_x Q_{max}}}{\\sum_{i}^{n}e^{scale_x X_i - scale_x Q_{max}}} = \\frac {e^{scale_x (X_i - Q_{max})}} {\\sum_{i}^{n} e^{scale_x (X_i - Q_{max})}} \\] \\[ t_i = e^{scale_x(X_i - Q_{max})}, t_i \\in (0, 1) \\] <p>\u6b63\u5982\u63a8\u6f14\u516c\u5f0f\u6240\u793a\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u7701\u53bb\u6c42\u6700\u5927\u503c\u7684\u64cd\u4f5c\u3002</p>"},{"location":"nn_quant/table_based_quant/#_7","title":"\u786e\u5b9a\u5206\u6bcd\u6620\u5c04\u8868","text":"<p>\u6211\u7684\u76ee\u6807\u662f\u5b9e\u73b0 softmax \u7684\u5168\u91cf\u5316\uff0c\u6240\u4ee5\u4e5f\u4f1a\u5bf9 \\(t_i\\) \u505a\u91cf\u5316\uff0c\u5728\u6574\u6570\u57df\u8fdb\u884c\u8ba1\u7b97\u3002 \u4e3a\u4e86\u80fd\u5b9e\u73b0\u5bf9 \\(t_i\\) \u505a\u91cf\u5316\uff0c\u76ee\u524d\u7f3a\u5c11\u7684\u6761\u4ef6\u662f \\(t_i\\) \u8f93\u51fa\u7684\u91cf\u5316 \\(scale\\) \u503c\u3002\u4e8e\u662f\u8fd9\u4e00\u5c0f\u8282\u5c06\u63a8\u6f14\u5982\u4f55\u786e\u5b9a \\(t_i\\) \u7684\u8f93\u51fa\u91cf\u5316 \\(scale\\)\u3002\u6839\u636e\u524d\u9762\u7684\u63a8\u6f14\uff0c\u7b80\u5316\u516c\u5f0f\uff0c\u5e76\u5e26\u5165 \\(t_i\\) \u7684\u91cf\u5316\u8868\u8fbe \\(t_i = scale_t T_i\\)\uff0c\u5316\u7b80\u5982\u4e0b\uff0c</p> \\[ y_i = \\frac {t_i} {\\sum_{i}^{n} t_i} = \\frac {scale_t T_i} {\\sum_{i}^{n} scale_t T_i} = \\frac {T_i} {\\sum_{i}^{n}T_i} \\] <p>\u81f3\u6b64\u8bc1\u660e \\(t_i\\) \u7684\u91cf\u5316\u8f93\u51fa\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8e\u8ba1\u7b97\uff0ci.e., \u53ef\u4ee5\u5728\u6574\u6570\u57df\u8fdb\u884c\u7d2f\u52a0\u548c\u9664\u6cd5\u64cd\u4f5c\u3002</p> <p>\u63a5\u4e0b\u6765\u8981\u786e\u5b9a \\(scale_t\\) \u7684\u53d6\u503c\u3002\u5728\u786e\u5b9a \\(scale_t\\) \u7684\u53d6\u503c\u65f6\uff0c\u9700\u8981\u7ed3\u5408\u786c\u4ef6\u7684\u6574\u6570\u7d2f\u52a0\u5668\u6765\u8003\u8651\u3002\u770b\u5230\u6574\u6570\u7d2f\u52a0\uff0c\u901a\u5e38\u4f1a\u5f15\u8d77\u505a\u91cf\u5316\u540c\u5b66\u7684\u8b66\u60d5\u3002\u7d2f\u52a0\u7ed3\u679c\uff08\u5305\u62ec\u4e2d\u95f4\u7ed3\u679c\uff09\u4f1a\u88ab\u5b58\u5230\u786c\u4ef6\u7684\u7d2f\u52a0\u5668\uff08\\(acc\\)\uff09\u4e2d\u3002\u800c\u7d2f\u52a0\u5668\u4f4d\u5bbd\uff08\\(bit_{acc}\\)\uff09\u901a\u5e38\u90fd\u662f\u56fa\u5b9a\u7684\u3002\u4f4d\u5bbd\u56fa\u5b9a\uff0c\u7d2f\u52a0\u7684\u4e0a\u9650\u4e5f\u5c31\u786e\u5b9a\uff0c\u4ee4\u5176\u4e3a \\(Q_{acc}^{max} = 2^{bit_{acc} - 1} - 1\\)\uff0c\u5728 softmax \u8fd9\u4e2a\u573a\u666f\u4e2d\uff0c\u751a\u81f3\u53ef\u4ee5\u7528\u65e0\u7b26\u53f7\u8868\u793a\uff0c\u56e0\u4e3a \\(T\\) \u80af\u5b9a\u5927\u4e8e\u96f6\u3002\\(T\\) \u7684\u6bcf\u4e2a\u5143\u7d20\u503c\u5927\u5c0f\u662f\u5343\u53d8\u4e07\u5316\u7684\uff0c\\(T\\) \u7684\u5143\u7d20\u4e2a\u6570 \\(n\\) \u662f\u53ef\u4ee5\u786e\u5b9a\u7684\u3002\u6839\u636e \\(Q_{acc}^{max}\\) \u548c \\(n\\)\uff0c\u53ef\u4ee5\u4f5c\u4ee5\u4e0b\u7ea6\u675f\uff0c</p> \\[ \\max_{i \\in n}(T_i) n \\le Q_{acc}^{max} \\] \\[ \\max_{i \\in n}(T_i) \\le \\frac {Q_{acc}^{max}} {n} \\] <p>\u4e3a\u4e86\u5145\u5206\u5229\u7528 \\(acc\\) \u7684\u6bcf\u4e2a \\(bit\\) \u4f4d\uff0c\u4ee4</p> \\[ \\max_{i \\in n}(T_i) =\\left \\lfloor  \\frac {Q_{acc}^{max}} {n} \\right \\rfloor \\] <p>\u7531\u524d\u9762\u7684\u63a8\u7406 \\(t_i \\in (0, 1)\\)\uff0c\u6839\u636e\u8ba1\u7b97\u91cf\u5316\u516c\u5f0f\uff0c\\(scale = \\frac {F_{max}} {Q_{max}}\\)\uff0c\u53ef\u5f97\uff0c</p> \\[ scale_t = \\frac {\\max_{i \\in n}(t_i)} {\\max_{i \\in n}(T_i)} = \\frac {1} {\\max_{i \\in n}(T_i)} \\] <p>\u5c31\u6b64\u786e\u5b9a\u5206\u6bcd\u4e2d \\(T\\) \u7684\u91cf\u5316\u7f29\u653e\u56e0\u5b50 \\(scale_t = \\frac {1} {\\max_{i \\in n}T_i}\\)\u3002\u5e76\u4e14 \\(\\frac {1} {\\max_{i \\in n}T_i}\\) \u662f\u5141\u8bb8\u7684\u6700\u5c0f \\(scale_t\\)\uff0c\u5982\u679c \\(scale_t &gt; \\frac {1} {\\max_{i \\in n}T_i}\\)\uff0c\u5c31\u5b58\u5728 \\(acc\\) \u6ea2\u51fa\u7684\u98ce\u9669\u3002</p> <p>\u7efc\u4e0a\uff0c</p> \\[ scale_t = \\frac {1} {\\max_{i \\in n}T_i} = \\frac {1} {\\left \\lfloor  \\frac {Q_{acc}^{max}} {n} \\right \\rfloor} \\] <p>\u6240\u4ee5\u53ea\u8981\u786e\u5b9a \\(acc\\) \u7684\u4f4d\u5bbd \\(bit_{acc}\\)\uff08\u7528\u6765\u786e\u5b9a \\(Q_{acc}^{max}\\)\uff09\u548c\u5143\u7d20\u4e2a\u6570 \\(n\\)\uff0c\u5c31\u80fd\u786e\u5b9a\u5206\u6bcd\u4e2d \\(T\\) \u7684\u7f29\u653e\u56e0\u5b50 \\(scale_t\\)\u3002\u81f3\u6b64\u7684\u516c\u5f0f\u63a8\u6f14\u53ef\u4ee5\u652f\u6491\u5b9e\u73b0 X -&gt; T \u7684\u67e5\u8868\u5b9e\u73b0\u3002</p>"},{"location":"nn_quant/table_based_quant/#_8","title":"\u786e\u5b9a\u5206\u5b50\u6620\u5c04\u8868","text":"<p>\u9996\u5148\u56de\u5230\u7b80\u5316\u516c\u5f0f\uff0c\\(y_i = \\frac {T_i} {\\sum_{i \\in n} T_i}\\)\uff0c\u5e26\u5165\u91cf\u5316\u8868\u8fbe \\(y_i = scale_y Y_i\\) \u5f97\uff0c</p> \\[ y_i = scale_y Y_i = \\frac {T_i} {\\sum_{i \\in n} T_i} \\] \\[ Y_i = \\frac { \\frac {T_i} {scale_y} } {\\sum_{i \\in n} T_i} \\] <p>\u56e0\u4e3a \\(y_i \\in (0, 1)\\)\uff0c\u6240\u4ee5 \\(scale_y &lt; 1\\)\u3002\u5982\u679c \\(\\frac {T_i} {scale_y}\\) \u53ea\u4fdd\u7559\u6574\u6570\u76f8\u5f53\u4e8e\u53c8\u505a\u4e86\u4e00\u6b21\u91cf\u5316\uff08\u7b2c\u4e00\u6b21\u662f \\(T_i = \\frac {t_i} {scale_t}\\)\uff09\u3002\u4e8e\u662f\u9700\u8981\u786e\u5b9a\u7528\u591a\u5927\u4f4d\u5bbd\u6765\u5b58\u653e \\(\\frac {T_i} {scale_y}\\)\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u53d1\u751f\u6ea2\u51fa\u95ee\u9898\u3002</p> <p>\u56e0\u4e3a \\(\\max_{i \\in n}y \\in [\\frac {1} {n}, 1)\\) \u5f53 \\(n = 1\\) \u65f6, \\(\\max_{i \\in n} y_i = 1\\) \u5373 \\(\\min(\\max_{i \\in n}y_i) = \\frac {1} {n}\\)</p> <p>\u518d\u7ed3\u5408 \\(scale_y = \\frac { \\max_{i \\in n} y} {Q_{output}^{max}}\\) \u53ef\u5f97\uff0c</p> \\[ \\min(scale_y) = \\frac {\\min(\\max_{i \\in n}y)} {Q_{output}^{max}} = \\frac {1} {n Q_{output}^{max}} \\] <p>\u4e8e\u662f\uff0c</p> \\[ \\max( \\frac {T_i} {scale_y}) = \\frac {\\max_{i \\in n}T_i} {\\min(scale_y)} = \\frac {Q_{acc}^{max}} {n} n Q_{output}^{max} = Q_{acc}^{max} Q_{output}^{max} \\] <p>\u7b49\u5f0f\u7684\u63a8\u8bba\u662f\uff0c\u5206\u5b50 \\(\\frac {T_i} {scale_y}\\) \u9700\u8981\u4f4d\u5bbd \\(bit_{acc} + bit_{output}\\) \u6765\u5b58\u653e\uff0c\u8fd9\u6837\u53ef\u4ee5\u5b8c\u5168\u907f\u514d\u6ea2\u51fa\u95ee\u9898\u3002\u5c06\u4e4b\u524d\u7684\u7b49\u5f0f\u91cd\u65b0\u68b3\u7406\u4e00\u4e0b\uff0c</p> \\[ Y_i = \\frac { \\frac {T_i} {scale_y}} {\\sum_{i}^{n}T_i} = \\frac { \\frac {t_i} {scale_t scale_y}} {\\sum_{i}^{n} T_i} = \\frac {P_i} {\\sum_{i}^{n}T_i} \\] <p>\u5176\u4e2d \\(P_i = \\frac {t_i} {scale_t scale_y}\\)\uff0c\u4e5f\u5c31\u662f\u5c06\u4e24\u6b21\u91cf\u5316\u7b49\u6548\u4e3a\u4e00\u6b21\u3002\u8bf4\u7b49\u6548\u5176\u5b9e\u4e0d\u5408\u9002\uff0c\u56e0\u4e3a\u4e24\u6b21\u5e76\u4e00\u6b21\uff0c\u53ef\u4ee5\u51cf\u5c11\u4e00\u6b21 round \u8bef\u5dee\u3002\u81f3\u6b64\u7684\u516c\u5f0f\u63a8\u6f14\u53ef\u4ee5\u652f\u6491\u5b9e\u73b0 X -&gt; P \u7684\u67e5\u8868\u5b9e\u73b0\u3002</p>"},{"location":"nn_quant/table_based_quant/#_9","title":"\u529f\u80fd\u4ee3\u7801","text":"<p>\u6839\u636e\u7b49\u5f0f\u5173\u7cfb\uff0c</p> \\[ Y_i = \\frac {P_i} {\\sum_{i}^{n}T_i} \\] \\[ P_i = \\left \\lfloor \\frac {t_i} {scale_t scale_y} \\right \\rfloor \\] \\[ T_i = \\left \\lfloor \\frac {t_i} {scale_t} \\right \\rfloor \\] \\[ t_i = e^{scale_x (X_i - Q_{input}^{max})} \\] \\[ scale_t = \\frac {1} {\\max_{i \\in n} T_i} = \\frac {1} {\\left \\lfloor \\frac {Q_{acc}^{max}} {n} \\right \\rfloor} \\] <p>\u53ef\u4ee5\u8bbe\u8ba1\u4e24\u4e2a\u6620\u5c04\u8868\u5206\u522b\u662f X -&gt; T \u548c X -&gt; P\uff0c\u5176\u4e2d \\(X\\) \u7528 \\(bit_{input}\\) \u4f4d\u5bbd\u5b58\u653e\uff0c\\(T\\) \u4e0e \\(acc\\) \u4fdd\u6301\u4e00\u81f4\u7528 \\(bit_{acc}\\) \u4f4d\u5bbd\u5b58\u653e\uff0c\\(P\\) \u7528 \\(bit_{acc} + bit_{output}\\) \u4f4d\u5bbd\u5b58\u653e\u3002</p> <p>\u4ee3\u7801\u5730\u5740</p> <pre><code>class Softmax(torch.nn.Module):\n\n    def __init__(self,\n                 dim_len: int,\n                 input_bit: int,\n                 input_amax: float,\n                 input_unsign: bool,\n                 output_bit: int,\n                 output_amax: float,\n                 output_unsign: bool = True,\n                 acc_bit: int = 16,\n                 narrow: bool = False,\n                 dim: int = None) -&gt; None:\n        super().__init__()\n\n        assert (input_bit &lt;= 8)\n\n        self._dim = dim if dim else -1\n        self._dim_len = dim_len\n\n        self.input_qconfig = QuantConfig(bit=input_bit, narrow=narrow, unsign=input_unsign, amax=input_amax)\n        self.output_qconfig = QuantConfig(bit=output_bit, narrow=narrow, unsign=output_unsign, amax=output_amax)\n\n        # (input_quant) -&gt; minus_max -&gt; DQ -&gt; float_func -&gt; (exp_float)\n        input_quant = self.input_qconfig.range.to(torch.int32)\n        input_quant_minus_max = input_quant - self.input_qconfig.quant_max\n        input_float_minus_max = self.input_qconfig.dequantize(input_quant_minus_max)\n        exp_float = torch.exp(input_float_minus_max)\n\n        acc_quant_max = quant_max(bit=acc_bit, unsign=False)\n\n        # denominator\n        denominator_scale = 1 / (acc_quant_max // dim_len)  # denominator allowed min quant scale\n        self.denominator_element_qconfig = QuantConfig(bit=acc_bit, narrow=False, unsign=False, scale=denominator_scale)\n        # (exp_float) -&gt; Q -&gt; (denominator_element_quant)\n        denominator_element_quant = self.denominator_element_qconfig.quantize(exp_float)\n\n        # numerator\n        numerator_bit = acc_bit + output_bit\n        numerator_scale = denominator_scale * self.output_qconfig.scale\n        self.numerator_qconfig = QuantConfig(bit=numerator_bit, narrow=False, unsign=False, scale=numerator_scale)\n        # (exp_float) -&gt; Q -&gt; (numerator_quant)\n        numerator_quant = self.numerator_qconfig.quantize(exp_float)\n\n        # adjust sequence of output_quant for easier retrieve\n        if input_unsign:\n            self._denominator_element_table = denominator_element_quant\n            self._numerator_table = numerator_quant\n        else:\n            index = self.input_qconfig.quant_max if narrow else self.input_qconfig.quant_max + 1\n            self._denominator_element_table = torch.cat(\n                (denominator_element_quant[index:], denominator_element_quant[:index]))\n            self._numerator_table = torch.cat((numerator_quant[index:], numerator_quant[:index]))\n\n    def forward(self, x: torch.Tensor):\n        denominator_element = self._denominator_element_table[x.to(torch.int64)]\n        denominator = torch.sum(denominator_element, dim=self._dim)\n\n        numerator = self._numerator_table[x.to(torch.int64)]\n\n        y = numerator / denominator\n        y = torch.clamp(y, self.output_qconfig.quant_min, self.output_qconfig.quant_max)\n        y = y.to(self.output_qconfig.dtype)\n        return y\n</code></pre>"},{"location":"nn_quant/table_based_quant/#_10","title":"\u6d4b\u8bd5\u4ee3\u7801","text":"<p>\u4ee3\u7801\u5730\u5740</p> <p>\u6d4b\u8bd5\u4ee3\u7801\u548c\u6d4b\u8bd5\u8bbe\u8ba1\u4e2d\u63d0\u5230\u7684\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u56e0\u4e3a Softmax \u4e0d\u662f\u7b80\u5355\u67e5\u8868\u5c31\u80fd\u5b9e\u73b0\u7684\uff0c\u8fc7\u7a0b\u4e2d\u5b58\u5728\u7d2f\u52a0\u548c\u9664\u6cd5\uff0c\u6240\u4ee5\u5b58\u5728\u65e0\u6cd5\u907f\u514d\u7684\u8bef\u5dee\u3002\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e2d\uff0c\u5c06\u91cf\u5316\u8f93\u51fa\u7684\u6700\u5927\u7edd\u5bf9\u503c\u8bef\u5dee\uff08max absolute error\uff09\u9650\u5b9a\u5728 1 \u4ee5\u5185\uff08\u5305\u62ec 1\uff09\uff0c\u4e5f\u5c31\u662f\u7b49\u4ef7\u6d6e\u70b9\u8f93\u51fa\u8bef\u5dee\u5728 output_quant_scale \u4ee5\u5185\uff0c\u5bf9\u5e94\u4ee3\u7801\u5757 L19\u3002</p> <pre><code>def _check_symmetric_quant_table_softmax(dim_len_range: Tuple[int],\n                                         input_bit_range: Tuple[int],\n                                         input_amax_range: Tuple[float],\n                                         input_unsign_range: Tuple[bool],\n                                         output_bit_range: Tuple[int],\n                                         output_amax_range: Tuple[float],\n                                         output_unsign_range: Tuple[bool] = (False,)):\n    for dim_len in tqdm(range(dim_len_range[0], dim_len_range[1]), desc=f'Testing {Softmax}'):\n        for input_bit in input_bit_range:\n            for input_amax in input_amax_range:\n                for input_unsign in input_unsign_range:\n                    for output_bit in output_bit_range:\n                        for output_amax in output_amax_range:\n                            for output_unsign in output_unsign_range:\n                                for narrow in (True, False):\n                                    max_absolute_error = __check_symmetric_quant_table_softmax(\n                                        dim_len, input_bit, input_amax, input_unsign, output_bit, output_amax,\n                                        output_unsign, narrow)\n                                    if max_absolute_error &gt; 1:\n                                        print(f'dim_len = {dim_len}, input_bit = {input_bit}, input_amax = {input_amax}, input_unsign = {input_unsign}, '\\\n                                                f'output_bit = {output_bit}, output_amax = {output_amax}, output_unsign = {output_unsign}, '\\\n                                                f'narrow = {narrow} max_absolute_error is {max_absolute_error}!')\n                                        return False\n\n    return True\n</code></pre> <p>\u5907\u6ce8\uff1a\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u672a\u6dfb\u52a0 \\(bit_{acc}\\) \u7684\u904d\u5386\u6d4b\u8bd5\u3002\u7ecf\u624b\u52a8\u8c03\u8282 \\(bit_{acc}\\) \u5927\u5c0f\u53d1\u73b0\uff0c\\(bit_{acc}\\) \u8d8a\u5927\uff0c\u8bef\u5dee\u8d8a\u5c0f\u3002\\(bit_{acc}\\) \u8f83\u5c0f\u65f6\uff0c\u8bef\u5dee\u5f88\u5927\uff0c\u6d4b\u8bd5\u65e0\u6cd5\u901a\u8fc7\u3002\\(bit_{acc}\\) \u8db3\u591f\u5927\u65f6\uff0c\u8bef\u5dee\u53ef\u4ee5\u63a7\u5236\u5728\u5141\u8bb8\u8303\u56f4\u5185\uff0c\u6d4b\u8bd5\u80fd\u901a\u8fc7\u3002\u6b64\u65f6 \\(bit_{acc}\\) \u518d\u589e\u5927\u4f1a\u53d1\u73b0\uff0c\u7edd\u5bf9\u503c\u8bef\u5dee\u4e3a 1 \u7684\u6570\u91cf\u4f1a\u9010\u6e10\u51cf\u5c11\u3002\u6709\u5174\u8da3\u7684\u670b\u53cb\u4e5f\u53ef\u4ee5\u8bd5\u4e00\u4e0b\u3002\u7a76\u5176\u539f\u56e0\uff0c\u662f \\(bit_{acc}\\) \u4f4d\u5bbd\u589e\u5927\uff0c\u4fdd\u7559\u4e86\u66f4\u591a\u539f\u6765\u6d6e\u70b9\u6570\u672b\u5c3e\u7684\u5c0f\u6570\u4fe1\u606f\uff0c\u4fdd\u7559\u7684\u8d8a\u591a\u7d2f\u52a0\u540e\u7684\u8bef\u5dee\u4e5f\u5c31\u8d8a\u5c0f\u3002</p>"},{"location":"nn_quant/table_based_quant/#_11","title":"\u5185\u5b58\u5f00\u9500","text":""},{"location":"nn_quant/table_based_quant/#_12","title":"\u6620\u5c04\u8868","text":"<p>\u76f8\u8f83\u666e\u901a\u7684\u6d6e\u70b9\u8ba1\u7b97\uff0cSoftmax \u7684\u91cf\u5316\u67e5\u8868\u5b9e\u73b0\uff0c\u9700\u8981\u50a8\u5b58\u4e24\u5f20\u6620\u5c04\u8868\u3002\u6309\u7167\u8bbe\u5b9a\uff0c</p> <ul> <li>\u91cf\u5316\u8f93\u5165\u6bd4\u7279\u4f4d\u6570\uff1a\\(bit_{input}\\)</li> <li>\u7d2f\u52a0\u5668\u6bd4\u7279\u4f4d\u6570\uff1a\\(bit_{acc}\\)</li> <li>\u91cf\u5316\u8f93\u51fa\u6bd4\u7279\u4f4d\u6570\uff1a\\(bit_{output}\\)</li> </ul> <p>\u53ef\u4ee5\u5f97\u5230\uff0c</p> <ul> <li>X -&gt; T \u6620\u5c04\u8868\u5185\u5b58\u5927\u5c0f\u8ba1\u7b97\u516c\u5f0f\uff0c\\(2^{bit_{input}} bit_{acc} (bits) = \\frac {2^{bit_{input}} bit_{acc}} {8} (Bytes)\\)</li> <li>X -&gt; P \u6620\u5c04\u8868\u5185\u5b58\u5927\u5c0f\u8ba1\u7b97\u516c\u5f0f\uff0c\\(2^{bit_{input}} (bit_{acc} + bit_{output}) (bits) = \\frac {2^{bit_{input}} (bit_{acc} + bit_{output})} {8} (Bytes)\\)</li> </ul> <p>\u5e26\u5165\u5177\u4f53\u53c2\u6570\u7684\u5177\u8c61\u611f\u53d7\u5982\u4e0b\u8868\u6240\u793a\uff0c</p> \\(bit_{input}\\) \\(bit_{acc}\\) \\(bit_{output}\\) X -&gt; T(Bytes) X -&gt; P(Bytes) \u603b\u548c(Bytes) 8 16 8 512 768 1280 8 32 8 1024 1280 2304 4 16 4 32 40 72"},{"location":"nn_quant/table_based_quant/#_13","title":"\u4e2d\u95f4\u91cf","text":"<p>\u6309\u7167 Python \u4ee3\u7801\u5b9e\u73b0\u6d41\u7a0b\uff0c\u4f1a\u6709\u4e24\u4e2a\u4e2d\u95f4\u53d8\u91cf\u5206\u5b50 \\(P\\) \u548c\u5206\u6bcd \\(\\sum_{i}^{n}T_i\\)\u3002\u629b\u5f00 Python \u7684\u4ee3\u7801\u5b9e\u73b0\uff08Python \u4ee3\u7801\u53ea\u4f53\u73b0\u4e86\u91cf\u5316\u7684\u5b9e\u73b0\uff09\uff0c\u8f6c\u800c\u601d\u8003 C/C++ \u7684\u4ee3\u7801\u4f18\u5316\uff08\u6216\u8005\u786c\u4ef6\u8bbe\u8ba1\u7684\u4f18\u5316\uff09\u3002</p> <ul> <li>\u9996\u5148\u8ba8\u8bba \\(\\sum_{i}^{n}T_i\\) \u7684\u4f18\u5316\u8fc7\u7a0b\u3002\u901a\u5e38\u7684\u505a\u6cd5\u662f\uff0c\u5728\u6c42\u548c\u524d\u5c06\u7d2f\u52a0\u5668\u6e05\u96f6\u3002\u9010\u4e2a\u5143\u7d20\u67e5\u8868\u5f97\u5230 \\(T_i\\) \u5e76\u7d2f\u52a0\u5230\u7d2f\u52a0\u5668\u4e0a\u3002\u8fd9\u6837\u65e0\u9700\u63d0\u4f9b\u6682\u5b58 tensor\u3002</li> <li>\u518d\u6765\u8ba8\u8bba \\(P\\) \u7684\u4f18\u5316\u8fc7\u7a0b\u3002\u5f97\u5230 \\(\\sum_{i}^{n}T_i\\) \u4e4b\u540e\uff0c\u9010\u4e2a\u5143\u7d20\u67e5\u8868\u5f97\u5230 \\(P_i\\) \u5e76\u8ba1\u7b97 \\(\\frac {P_i} {\\sum_{i}^{n}T_i} = Y_i\\)\u3002\u8fd9\u6837\u4e5f\u65e0\u9700\u63d0\u4f9b\u6682\u5b58 tensor\u3002</li> </ul> <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\u65e0\u9700\u4e3a\u4e2d\u95f4\u91cf\u63d0\u4f9b\u5927\u5185\u5b58\u3002</p>"},{"location":"nn_quant/table_based_quant/#_14","title":"\u5c0f\u7ed3","text":"<p>\u91cf\u5316 Softmax \u5e26\u6765\u989d\u5916\u7684\u5185\u5b58\u6d88\u8017\u6765\u81ea\u4e24\u4e2a\u6620\u5c04\u8868\uff0c\u4e14\u5185\u5b58\u6d88\u8017\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u5185\uff08\u4ee5 \\(bit_{input} = 8,bit_{acc} = 32,bit_{output} = 8\\) \u4e3a\u4f8b\uff0c\u76f8\u5f53\u4e8e\u5f15\u5165\u4e86\u4e00\u4e2a\u5927\u5c0f\u4e3a [N, C, H, W] = [64, 32, 3, 3] \u7684 int8 \u5377\u79ef\u6838\uff09\u3002</p>"},{"location":"notes/ai_compiler/","title":"Ai compiler","text":"<pre><code>def matmul(left, right, output):\n    B, M, K = left.shape\n    _, N = right.shape\n\n    for b in range(B):\n        for m in range(M):\n            for k in range(K):\n                for n in range(N):\n                    output[b, m, n] += input[b, m, k] * output[k, n]\n    # B M K N \u4efb\u610f\u8c03\u6362\u987a\u5e8f\u4e0d\u5f71\u54cd\u7ed3\u679c\n\n\n\n\ndef add(output, bias):\n    B, M, N = output.shape\n\n    for b in range(B):\n        for m in range(M):\n            for n in range(n):\n                output[b, m, n] += bias[n]\n\n\n\n\ndef matmul_add(left, right, bias, output):\n    B, M, K = left.shape\n    _, N = right.shape\n\n    for b in range(B):\n        for m in range(M):\n            for n in range(N):\n                output[b, m, n] = bias[n]\n                for k in range(K):\n                    output[b, m, n] += input[b, m, k] * output[k, n]\n</code></pre>"},{"location":"notes/dataflow/","title":"Dataflow","text":""},{"location":"notes/dataflow/#dataflow","title":"Dataflow\u67b6\u6784","text":"<p>Dataflow\u67b6\u6784\u662f\u4e00\u79cd\u8ba1\u7b97\u67b6\u6784\uff0c\u5b83\u901a\u8fc7\u6570\u636e\u6d41\u52a8\u6765\u9a71\u52a8\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u800c\u975e\u5e38\u89c4\u6307\u4ee4\u6d41\u52a8\u3002\u4e0e\u4f20\u7edf\u7684\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\u4e0d\u540c\uff0cDataflow\u67b6\u6784\u5f3a\u8c03\u5e76\u884c(\u6d41\u6c34)\u5904\u7406\u548c\u6570\u636e\u9a71\u52a8\u7684\u6267\u884c\u6a21\u578b\u3002</p> <ul> <li> <p>\u5b9a\u4e49\u4e0e\u57fa\u672c\u6982\u5ff5\uff1a\u5728Dataflow\u67b6\u6784\u4e2d\uff0c\u7a0b\u5e8f\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u6570\u636e\u6d41\u56fe(Dataflow Graph)\uff0c \u5176\u4e2d\u8282\u70b9\u4ee3\u8868\u8ba1\u7b97\u64cd\u4f5c\uff0c\u8fb9\u4ee3\u8868\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u3002\u6bcf\u4e2a\u8282\u70b9\u5728\u5176\u6240\u6709\u8f93\u5165\u6570\u636e\u51c6\u5907\u597d\u540e\u7acb\u5373\u6267\u884c\uff0c\u5e76\u5c06\u7ed3\u679c\u4f20\u9012\u7ed9\u4e0b\u6e38\u8282\u70b9\u3002</p> </li> <li> <p>Dataflow\u67b6\u6784\u7684\u5386\u53f2\u80cc\u666f\uff1aDataflow\u67b6\u6784\u7684\u6982\u5ff5\u6700\u65e9\u53ef\u4ee5\u8ffd\u6eaf\u523020\u4e16\u7eaa60\u5e74\u4ee3\u548c70\u5e74\u4ee3\uff0c\u5f53\u65f6\u7814\u7a76\u4eba\u5458\u5f00\u59cb\u63a2\u7d22\u5982\u4f55\u901a\u8fc7\u5e76\u884c\u5904\u7406\u63d0\u9ad8\u8ba1\u7b97\u6027\u80fd\u3002MIT\u7684Tagged Token Dataflow\u548c\u66fc\u5f7b\u65af\u7279\u5927\u5b66\u7684Dataflow Machine\u662f\u65e9\u671f\u7684\u7ecf\u5178\u5b9e\u73b0\u3002</p> </li> </ul>"},{"location":"notes/dataflow/#_1","title":"\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784","text":"<p>\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\u662f\u73b0\u4ee3\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u57fa\u7840\u67b6\u6784\uff0c\u7531\u7ea6\u7ff0\u00b7\u51af\u00b7\u8bfa\u4f9d\u66fc\u572820\u4e16\u7eaa40\u5e74\u4ee3\u63d0\u51fa\u3002\u5b83\u91c7\u7528\u5b58\u50a8\u7a0b\u5e8f\u7684\u6982\u5ff5\uff0c\u5373\u7a0b\u5e8f\u6307\u4ee4\u548c\u6570\u636e\u5b58\u50a8\u5728\u540c\u4e00\u4e2a\u5b58\u50a8\u5668\u4e2d\uff0c\u5e76\u901a\u8fc7\u4e2d\u592e\u5904\u7406\u5355\u5143\uff08CPU\uff09\u9010\u6761\u6267\u884c\u6307\u4ee4\u3002</p> <ul> <li> <p>\u57fa\u672c\u6982\u5ff5\uff1a\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\u5305\u62ec\u4e94\u4e2a\u4e3b\u8981\u90e8\u5206\uff1a\u8f93\u5165\u8bbe\u5907\u3001\u8f93\u51fa\u8bbe\u5907\u3001\u5b58\u50a8\u5668\u3001\u7b97\u672f\u903b\u8f91\u5355\u5143\uff08ALU\uff09\u548c\u63a7\u5236\u5355\u5143\u3002\u7a0b\u5e8f\u6307\u4ee4\u548c\u6570\u636e\u5b58\u50a8\u5728\u5b58\u50a8\u5668\u4e2d\uff0cCPU\u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u6307\u4ee4\u5e76\u6267\u884c\u3002</p> </li> <li> <p>\u6307\u4ee4\u5468\u671f\uff1a\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\u7684\u6267\u884c\u8fc7\u7a0b\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u53d6\u6307\u3001\u8bd1\u7801\u3001\u6267\u884c\uff0c\u8bbf\u5b58\u548c\u5199\u56de5\u4e2a\u9636\u6bb5\u3002\u6bcf\u4e2a\u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c\uff0c\u5f62\u6210\u4e00\u4e2a\u6307\u4ee4\u5468\u671f\u3002</p> </li> </ul>"},{"location":"notes/dataflow/#dataflow_1","title":"Dataflow\u67b6\u6784\u4e0e\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\u7684\u5bf9\u6bd4","text":"<p>Dataflow\u67b6\u6784\u4e0e\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\u5728\u6267\u884c\u6a21\u578b\u3001\u5e76\u884c\u5904\u7406\u80fd\u529b\u548c\u80fd\u6548\u7b49\u65b9\u9762\u5b58\u5728\u663e\u8457\u5dee\u5f02\u3002</p> <ul> <li> <p>\u6267\u884c\u6a21\u578b\uff1a</p> <ul> <li> <p>\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\uff1a\u91c7\u7528\u987a\u5e8f\u6267\u884c\u6a21\u578b\uff0c\u6307\u4ee4\u6309\u987a\u5e8f\u4ece\u5b58\u50a8\u5668\u4e2d\u8bfb\u53d6\u5e76\u6267\u884c\u3002\u6bcf\u6761\u6307\u4ee4\u7684\u6267\u884c\u4f9d\u8d56\u4e8e\u524d\u4e00\u6761\u6307\u4ee4\u7684\u5b8c\u6210\u3002</p> </li> <li> <p>Dataflow\u67b6\u6784\uff1a\u91c7\u7528\u6570\u636e\u9a71\u52a8\u7684\u6267\u884c\u6a21\u578b\uff0c\u8282\u70b9\u5728\u5176\u6240\u6709\u8f93\u5165\u6570\u636e\u51c6\u5907\u597d\u540e\u7acb\u5373\u6267\u884c\u3002\u591a\u4e2a\u8282\u70b9\u53ef\u4ee5\u5e76\u884c\u6267\u884c\uff0c\u53ea\u8981\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u5141\u8bb8\u3002</p> </li> </ul> </li> <li> <p>\u5e76\u884c\u5904\u7406\u80fd\u529b\uff1a</p> <ul> <li> <p>\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\uff1a\u5e76\u884c\u5904\u7406\u80fd\u529b\u6709\u9650\uff0c\u4e3b\u8981\u4f9d\u8d56\u4e8e\u591a\u6838\u5904\u7406\u5668\u548c\u8d85\u6807\u91cf\u6280\u672f\u6765\u63d0\u9ad8\u5e76\u884c\u6027 \uff08GPU\u9664\u5916\uff09\u3002</p> </li> <li> <p>Dataflow\u67b6\u6784\uff1a\u5929\u7136\u652f\u6301\u5e76\u884c\u5904\u7406\uff0c\u591a\u4e2a\u72ec\u7acb\u7684\u8ba1\u7b97\u64cd\u4f5c\u53ef\u4ee5\u540c\u65f6\u6267\u884c\uff0c\u4ece\u800c\u663e\u8457\u63d0\u9ad8\u8ba1\u7b97\u6027\u80fd\u3002</p> </li> </ul> </li> <li> <p>\u80fd\u6548\u6bd4\uff1a</p> <ul> <li> <p>\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\uff1a\u7531\u4e8e\u6307\u4ee4\u8c03\u5ea6\u548c\u63a7\u5236\u5f00\u9500\u8f83\u5927\uff0c\u800c\u4e14\u8bbf\u5b58\u8fc7\u4e8e\u9891\u7e41\uff08\u8bbf\u5b58\u7684\u80fd\u8017\u7ea6\u4e3aALU\u8fd0\u7b97\u768420\u500d\u5de6\u53f3\uff09\uff0c\u6240\u4ee5\u80fd\u6548\u6bd4\u76f8\u5bf9\u8f83\u4f4e\u3002</p> </li> <li> <p>Dataflow\u67b6\u6784\uff1a\u907f\u514d\u4e86\u4f20\u7edf\u67b6\u6784\u4e2d\u7684\u6307\u4ee4\u8c03\u5ea6\u548c\u63a7\u5236\u5f00\u9500\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u5728\u9700\u8981\u65f6\u6267\u884c\uff0c\u51cf\u5c11\u4e86\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\u548c\u6570\u636e\u4f20\u8f93\uff0c\u80fd\u6548\u6bd4\u66f4\u9ad8\u3002</p> </li> </ul> </li> </ul> <p>\u4ee5\u4e0b\u662f\u5377\u79ef\u5728\u51af\u00b7\u8bfa\u4f9d\u66fc\u67b6\u6784\u548cDataflow\u67b6\u6784\u4e0b\u7684\u6267\u884c\u8fc7\u7a0b\uff1a</p> <p>[</p> <p>1090\u00d7390 37.1 KB</p> <p>](https://1nfinite.ai/uploads/default/original/1X/fc2d9a8c47c3b458e344e9d5f6943c04069ebb3b.png)</p> <p>\u56fe 1\uff1a\u5377\u79ef\u5728\u4f20\u7edf\u7684\u67b6\u6784\u4e0b\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b \uff08\u6765\u6e90\uff1a\u30106\u3011\uff09</p> <p>[</p> <p>1092\u00d7549 61.2 KB</p> <p>](https://1nfinite.ai/uploads/default/original/1X/ebfcb88c7fd0878ead3d5e1c3d756addc8c5c813.png)</p> <p>\u56fe 2\uff1a\u5377\u79ef\u5728\u6570\u636e\u6d41\u67b6\u6784\u4e0b\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b \uff08\u6765\u6e90\uff1a\u30106\u3011\uff09</p> <p>\u6bd4\u8f83\u5206\u6790\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u9664\u4e86\u6307\u4ee4\u9a71\u52a8\u548c\u6570\u636e\u9a71\u52a8\u7684\u533a\u522b\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u533a\u522b\uff0c\u8ba1\u7b97\u7684\u4e2d\u95f4\u6570\u636e\u4e0d\u9700\u8981\u5199\u56de\u5185\u5b58\u3002</p> <p>\u4ee5\u4e0a\u5185\u5bb9\u6458\u81ea\uff1ahttps://1nfinite.ai/t/dataflow/97</p> <p>\u4e00\u4e0b\u662f\u6211\u5bf9 Dataflow \u67b6\u6784\u7684\u7406\u89e3\uff1a</p> <p>Dataflow \u67b6\u6784\u4e0b\uff0c\u6307\u4ee4\u7684\u53d1\u5c04\u548c\u6267\u884c\u89e3\u8026\u3002\u53ea\u8981\u6570\u636e\u4f9d\u8d56\u6ee1\u8db3\uff0c\u786c\u4ef6\u5355\u5143\u5373\u53ef\u5f00\u59cb\u5de5\u4f5c\u3002 \u76f8\u53cd\u5728\u6307\u4ee4\u6d41\u67b6\u6784\u4e2d\uff0c\u6307\u4ee4\u9700\u8981\u6309\u90e8\u5c31\u73ed\uff0c\u5b8c\u6210\u4e00\u6761\u624d\u80fd\u6267\u884c\u4e0b\u4e00\u6761\uff0c\u6307\u4ee4\u53d1\u5c04\u7684\u5e76\u884c\u5ea6\u4e0a\u9650\u5c31\u662f\u6267\u884c\u7684\u5e76\u884c\u5ea6\u4e0a\u9650\u3002</p> <p>Dataflow \u67b6\u6784\u4e0b\uff0c\u6307\u4ee4\u53ef\u4ee5\u505a\u7684\u5f88\u201c\u5927\u201d\uff0c</p>"},{"location":"notes/fast_exp/","title":"exp \u7684\u5feb\u901f\u6c42\u89e3","text":""},{"location":"notes/fast_exp/#_1","title":"\u795e\u79d8\u6570\u5b57","text":"<p>https://blog.csdn.net/Yemiekai/article/details/108431606</p> <p>$$ \\left{\\begin{matrix} y=e^x \\ x=(-1)^{s_x} \\cdot (1+m_x) \\cdot 2^{e_x-bias_x} \\ y=(-1)^{s_y} \\cdot (1+m_y) \\cdot 2^{e_y-bias_y} \\end{matrix}\\right. $$ \u7b49\u4ef7\u4e3a\uff1a $$ (-1)^{s_y} \\cdot (1+m_y) \\cdot 2^{e_y-bias_y} = e^{(-1)^{s_x} \\cdot (1+m_x) \\cdot 2^{e_x-bias_x}} $$ i.e.\uff0c\u6c42\u89e3\u5176\u4e2d\u7684 \\(s_y\\)\uff0c\\(m_y\\)  \u548c \\(e_y\\)</p>"},{"location":"notes/fast_exp/#_2","title":"\u6cf0\u52d2\u5c55\u5f00","text":"<p>https://blog.csdn.net/Yemiekai/article/details/108431606</p>"},{"location":"notes/float_vs_quant/","title":"\u6d6e\u70b9\u6570 v.s. \u5b9a\u70b9\u6570","text":""},{"location":"notes/float_vs_quant/#_1","title":"\u6d6e\u70b9\u6570\u66f4\u9002\u7528\u4e8e\u8bad\u7ec3","text":"<p>\u6d6e\u70b9\u6570\u5177\u5907\u52a8\u6001\u8303\u56f4\u5927(\u503c\u57df\u8303\u56f4\u5927)\u7684\u7279\u70b9. \u52a8\u6001\u8303\u56f4\u5927\u5bf9\u4e8e\u8bad\u7ec3\u5f88\u6709\u5fc5\u8981. \u5c24\u5176\u662f\u5728\u6a21\u578b\u8bad\u7ec3\u7684\u65e9\u671f, \u6a21\u578b\u53c2\u6570\u5904\u4e8e\u968f\u673a\u521d\u59cb\u5316\u72b6\u6001, \u5bfc\u81f4\u6a21\u578b \\(loss\\) \u975e\u5e38\u5927, \u5f88\u5bb9\u6613\u5728\u53cd\u5411\u4f20\u9012(\u751a\u81f3\u662f\u524d\u5411\u63a8\u7406)\u65f6\u51fa\u73b0\u6781\u5927\u503c. \u4f8b\u5982\u5728\u505a FP16 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u65f6, \u6709\u4e9b\u5c42\u7684\u6570\u503c\u5bb9\u6613\u51fa\u73b0\u8d85\u51fa FP16 \u53ef\u4ee5\u8868\u8fbe\u7684\u6700\u5927\u503c 65504; \u5982\u679c\u6b64\u65f6\u8fd9\u4e9b\u5c42\u6362\u6210\u5b9a\u70b9\u6570(e.g., INT8)\u5c31\u66f4\u5e94\u8be5\u6ce8\u610f\u662f\u5426\u4f1a\u8d85\u51fa\u8303\u56f4.</p> <p>\u4e0d\u4ec5\u5982\u6b64, \u6d6e\u70b9\u6570\u8fd8\u5177\u5907\u9760\u8fd1 0 \u7684\u6b65\u957f\u5c0f, \u8fdc\u79bb 0 \u7684\u6b65\u957f\u5927. \u5448\u73b0\u7684\u6548\u679c\u5c31\u662f\u9760\u8fd1 0 \u7684\u6570\u5f88\u5bc6\u96c6, \u8fdc\u79bb 0 \u7684\u6570\u5f88\u7a00\u758f. \u6362\u800c\u8a00\u4e4b, \u6d6e\u70b9\u6570\u53ef\u4ee5\u8868\u5f81\u7ec6\u5c0f\u7684\u53d8\u5316, \u800c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d, \u56e0\u4e3a\u68af\u5ea6\u503c\u901a\u5e38\u90fd\u5f88\u5c0f, \u6b63\u597d\u9700\u8981\u80fd\u591f\u8868\u5f81\u8fd9\u4e9b\u7ec6\u5c0f\u7684\u53d8\u5316, \u8fd9\u6837\u8bad\u7ec3\u80fd\u591f\u975e\u5e38\u5e73\u6ed1\u800c\u7a33\u5b9a. \u5982\u679c\u53ef\u8868\u8fbe\u6570\u4e4b\u95f4\u7684\u6b65\u957f\u5f88\u5927, \u5c31\u6709\u53ef\u80fd\u56e0\u4e3a\u68af\u5ea6\u6570\u503c\u592a\u5c0f\u800c\u88ab \"\u6df9\u6ca1\".</p>"},{"location":"notes/float_vs_quant/#_2","title":"\u6570\u503c\u8ba1\u7b97\u7a33\u5b9a\u6027","text":"<p>\u6570\u503c\u7a33\u5b9a\u6027\u4e0a\u5b9a\u70b9\u6570\u8981\u4f18\u4e8e\u6d6e\u70b9\u6570. \u6d6e\u70b9\u6570\u5728\u505a\u52a0\u51cf\u6cd5\u65f6, \u5176\u4e2d\u6709\u4e00\u6b65\u662f\u5bf9\u9f50 \\(exponent\\), \u518d\u8fdb\u884c \\(mantissa\\) \u4f4d\u7684\u52a0\u51cf. \u5982\u679c\u52a0\u51cf\u6cd5\u53ea\u53d1\u751f\u5728\u4e24\u4e2a\u6570\u4e4b\u95f4, \u4e8b\u4ef6\u662f\u786e\u5b9a\u7684. \u4f46\u662f\u5f53\u53d1\u751f\u5728\u591a\u4e2a\u6570\u8fdb\u884c\u7d2f\u52a0/\u51cf\u65f6, \u8f93\u51fa\u5c31\u4f1a\u53d7\u8ba1\u7b97\u987a\u5e8f\u7684\u5f71\u54cd(\u5c3d\u7ba1\u6570\u5b66\u4e0a\u7b26\u5408\u4ea4\u6362\u5f8b).</p> <p>\u5177\u4f53\u8bb2, \u4ee5\u7d2f\u52a0\u4e3a\u4f8b, \u5047\u8bbe\u5143\u7d20\u6309\u7167\u539f\u987a\u5e8f\u4f9d\u6b21\u7d2f\u52a0, \u7d2f\u52a0\u5230\u4e00\u5b9a\u6570\u91cf\u5c31\u4f1a\u51fa\u73b0 \"\u8d85\u5927\u6570 + \u8d85\u5c0f\u6570\" \u7684\u73b0\u8c61. i.e., \"\u8d85\u5c0f\u6570\" \u4e3a\u4e86\u5bf9\u9f50 \\(exponent\\) \u4f4d, \u53f3\u79fb \\(mantissa\\) \u4f4d\u8fc7\u591a\u800c\u53d8 0, \u4e8e\u662f \"\u8d85\u5c0f\u6570\" \u5c31\u88ab \"\u8d85\u5927\u6570\" \u541e\u4e86, \u53d8\u5f97\u6beb\u65e0\u4ef7\u503c. \u6362\u4e2a\u601d\u8def, \u5bf9\u6240\u6709\u5143\u7d20\u6309\u6570\u91cf\u5206\u7ec4, \u7ec4\u5185\u6c42\u548c\u540e, \u5bf9\u548c\u518d\u6309\u6570\u91cf\u5206\u7ec4, \u518d\u5728\u7ec4\u5185\u6c42\u548c, \u76f4\u5230\u6240\u6709\u5143\u7d20\u90fd\u52a0\u5230\u4e00\u8d77. \u8fd9\u6837\u80fd\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u907f\u514d \"\u8d85\u5927\u6570 + \u8d85\u5c0f\u6570\" \u7684\u73b0\u8c61\u51fa\u73b0.</p> <p>\u53cd\u89c2\u5b9a\u70b9\u6570\u5c31\u6ca1\u6709\u8fd9\u6837\u7684\u95ee\u9898. e.g., \u591a\u4e2a\u6574\u6570\u76f8\u52a0/\u51cf, \u53ea\u8981\u7ed3\u679c(\u5305\u62ec\u4e2d\u95f4\u7ed3\u679c)\u4e0d\u4f1a\u6ea2\u51fa, \u4e0d\u7ba1\u600e\u4e48\u8c03\u6362\u8ba1\u7b97\u987a\u5e8f, \u7ed3\u679c\u4e5f\u4e0d\u4f1a\u6709\u53d8\u5316.</p>"},{"location":"notes/what_is_ai_doing/","title":"AI \u5728\u5e72\u4ec0\u4e48\uff1f","text":""},{"location":"notes/what_is_ai_doing/#ai_1","title":"AI \u5728\u8d4b\u4e88\u8d8a\u6765\u8d8a\u5927\u7684\u81ea\u7531\u5ea6","text":"<p>\u65e9\u671f\u673a\u5668\u5b66\u4e60\u90fd\u662f\u4eba\u4e3a\u603b\u7ed3\u51fa\u6765\u7684\u7ecf\u9a8c\uff0c\u5e76\u628a\u5b83\u6570\u5b66\u5316/\u4ee3\u7801\u5316\uff0ce.g.\uff0cPCA\u3001SVN \u7b49\u3002\u6b64\u65f6\u7684\u81ea\u7531\u5ea6\u5f88\u4f4e\uff0c\u4e0d\u5141\u8bb8 AI \u5e26\u5165\u81ea\u5df1\u7684\u201c\u60f3\u6cd5\u201d\uff0c\u4eba\u4e3a\u7ed9\u4e86\u7ecf\u9a8c\uff0c\u53ea\u7ba1\u6267\u884c\u5c31\u597d\u3002 \u540e\u6765\u6df1\u5ea6\u5b66\u4e60\u9010\u6e10\u5d1b\u8d77\uff0c\u901a\u8fc7\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7aef\u5230\u7aef\u7684\u5b8c\u6210\u56de\u5f52\u548c\u5206\u7c7b\u4efb\u52a1\uff0ce.g.\uff0cAlexNet \u7684\u5206\u7c7b\u95ee\u9898\u3001YOLO \u7cfb\u5217\u7684\uff08\u56de\u5f52\uff09\u76d1\u6d4b\u95ee\u9898\u3002\u6b64\u65f6\u7684\u81ea\u7531\u5ea6\uff0c\u91ca\u653e\u4e86\u65b9\u6cd5\u7684\u9009\u62e9\uff0cAI \u6309\u7167\u81ea\u5df1\u201c\u6240\u89c1\u6240\u95fb\u201d\uff0c\u5b66\u4e60\u6700\u7b80\u5355\u7684\u89c4\u5f8b\uff0c\u89e3\u51b3\u4e00\u4e2a\u5c0f\u95ee\u9898\u3002 \u76f4\u5230\u5927\u6a21\u578b\u7684\u51fa\u73b0\uff0c\u8bad\u7ec3\u7684\u65f6\u5019\u4e0d\u518d\u9650\u5b9a\u5177\u4f53\u7684\u4efb\u52a1\uff0ce.g.\uff0cChatGPT \u53ca\u5176\u884d\u751f\u5782\u57df\u4efb\u52a1\u3002\u6b64\u65f6\u7684\u81ea\u7531\u5ea6\u66f4\u52a0\u5bbd\u6cdb\uff0cAI \u5728\u4e00\u7cfb\u5217\u5bf9\u8bdd\u4e2d\u6478\u7d22\u66f4\u52a0\u81ea\u7136\u7684\u89c4\u5f8b\uff0c\u4e0e\u5782\u57df\u4efb\u52a1\u4e0d\u518d\u5f3a\u76f8\u5173\u3002\u50cf\u4eba\u7c7b\u4e00\u6837\u53bb\u4e0a\u5b66\uff0c\u5b66\u5230\u7684\u4e1c\u897f\u4e0d\u80fd\u76f4\u63a5\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u5f15\u5bfc\u62c6\u89e3\u95ee\u9898\uff0c\u6620\u5c04\u5230\u57fa\u672c\u516c\u7406\u548c\u5b9a\u7406\u8fdb\u884c\u89e3\u51b3\u3002</p>"},{"location":"train/update_gradient/","title":"\u68af\u5ea6\u66f4\u65b0","text":"\\[ \\bigtriangledown _x f = (\\frac{\\partial y}{\\partial x}) ^ T \\bigtriangledown _y f \\] <p>\u5176\u4e2d \\((\\frac{\\partial y}{\\partial x}) ^ T\\) \u662f\u96c5\u53ef\u6bd4\u77e9\u9635, \u901a\u8fc7\u96c5\u514b\u6bd4\u77e9\u9635\u8f6c\u7f6e\u4e0e\u540e\u7eed\u8282\u70b9\u68af\u5ea6\u503c\u7684\u4e58\u79ef, \u53ef\u4ee5\u5f97\u5230\u5f53\u524d\u8282\u70b9\u7684\u68af\u5ea6\u503c.</p> <p>\u53c2\u8003\u94fe\u63a5</p>"}]}